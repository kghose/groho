@startuml Sequence

actor User
boundary Scenario
control "Simulator" as sim
control Plotter
participant Chart
boundary "View" as plotf
actor "User" as u2

' Inital run

activate Scenario
activate plotf
plotf ->> Plotter: update(viewfile)
deactivate plotf
Plotter -> sim: load_data()
Plotter <-- sim: < no data >


Scenario ->> sim: restart(scenario)
deactivate Scenario
activate sim


Plotter -> Plotter: poll
activate Plotter
Plotter -> sim: load_data()
Plotter <-- sim: data
Plotter -> Chart: plot(data)
deactivate Plotter


Plotter -> Plotter: poll
activate Plotter
Plotter -> sim: load_data()
Plotter <-- sim: data
Plotter -> Chart: plot(data)
deactivate Plotter


' Restart after scenario edit

activate User
User -> Scenario: edit
deactivate User
activate Scenario

Scenario -> sim: stop
deactivate sim
Scenario -> sim: restart(scenario)
deactivate Scenario
activate sim

' User edits plot file

activate u2
u2 -> plotf: edit
deactivate u2

activate plotf
Plotter <- plotf: update(viewfile)
deactivate plotf
activate Plotter
Plotter -> sim: load_data()
Plotter <-- sim: data
Plotter -> Chart: plot(data)
deactivate Plotter


' User edits scenario, plotter tries to plot at the same time
activate User
User -> Scenario: edit
deactivate User
activate Scenario
Scenario -> sim: stop
deactivate sim

' Plotter poll returns no data
Plotter -> Plotter: poll
activate Plotter
Plotter -> sim: load_data()
Plotter <-- sim: < no data >
deactivate Plotter


Scenario -> sim: restart(scenario)
deactivate Scenario
activate sim

Plotter -> Plotter: poll
activate Plotter
Plotter -> sim: load_data()
Plotter <-- sim: data
Plotter -> Chart: plot(data)
deactivate Plotter


sim -> sim: done
deactivate sim

Plotter -> Plotter: poll
activate Plotter
Plotter -> sim: load_data()
Plotter <-- sim: data
Plotter -> Chart: plot(data)
deactivate Plotter


' User edits plot file again
activate u2
u2 -> plotf: edit
deactivate u2
activate plotf
Plotter <- plotf: update(viewfile)
deactivate plotf

activate Plotter
Plotter -> sim: load_data()
Plotter <-- sim: data
Plotter -> Chart: plot(data)
deactivate Plotter

@enduml